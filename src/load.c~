#include "../include/common/load.h"

// On fixe ici une adresse basse dans la mémoire virtuelle. Le premier segment
// ira se loger à cette adresse.
#define START_MEM 0x1000
// nombre max de sections que l'on extraira du fichier ELF
#define NB_SECTIONS 4

// nom de chaque section
#define TEXT_SECTION_STR ".text"
#define RODATA_SECTION_STR ".rodata"
#define DATA_SECTION_STR ".data"
#define BSS_SECTION_STR ".bss"
#define PILE_SECTION_STR "[stack]"
#define LIB_SECTION_STR "[lib]"
#define VSYSCALL_SECTION_STR "[vsyscall]"

//nom du prefix à appliquer pour la section
#define RELOC_PREFIX_STR ".rel"

// Fonction permettant de verifier si une chaine de caracteres
// est bien dans la liste des symboles du fichier ELF
// parametres :
// 		name : le nom de la chaine recherchée
//  		symtab : la table des symboles
//
// retourne 1 si present, 0 sinon
int is_in_symbols(char* name, stab symtab) {
    int i;
    for (i=0; i<symtab.size; i++) {
        if (!strcmp(symtab.sym[i].name,name)) return 1;
    }
    return 0;
}

// Cette fonction calcule le nombre de segments à prevoir
// Elle cherche dans les symboles si les sections predefinies
// s'y trouve
// parametres :
//  		symtab : la table des symboles
//
// retourne le nombre de sections trouvées

unsigned int get_nsegments(stab symtab,char* section_names[],int nb_sections) {
    unsigned int n=0;
    int i;
    for (i=0; i<nb_sections; i++) {
        if (is_in_symbols(section_names[i],symtab)) n++; /* si le nom section_names[i] est dans la liste des symboles du fichier ELF, incrémente */ 
    }
    return n;
}


// fonction permettant d'extraire une section du fichier ELF et de la chargée dans le segment du même nom
// parametres :
//   fp         : le pointeur du fichier ELF
//   memory     : la structure de mémoire virtuelle
//   scn        : le nom de la section à charger
//   permission : l'entier représentant les droits de lecture/ecriture/execution
//   add_start  : l'addresse virtuelle à laquelle la section doit être chargée
//
// retourne 0 en cas de succes, une valeur non nulle sinon
int elf_load_section_in_memory(FILE* fp, mem memory, char* scn,unsigned int permissions,unsigned long long add_start) 
{
    byte *ehdr    = __elf_get_ehdr( fp );
    byte *content = NULL;
    uint  textsz  = 0;
    vsize sz;
    vaddr addr;

    byte *useless = elf_extract_section_header_table( ehdr, fp );
    free( useless );

    if ( NULL == ehdr ) 
    {
        WARNING_MSG( "Can't read ELF file" );
        return 1;
    }

    if ( 1 == attach_scn_to_mem(memory, scn, SCN_ATTR( WIDTH_FROM_EHDR( ehdr ), permissions ) ) ) 
    {
        WARNING_MSG( "Unable to create %s section", scn );
        free( ehdr );
        return 1;
    }

    content = elf_extract_scn_by_name( ehdr, fp, scn, &textsz, NULL );
    if ( NULL == content ) {
        WARNING_MSG( "Corrupted ELF file" );
        free( ehdr );
        return 1;
    }

    switch( WIDTH_FROM_EHDR(ehdr) ) {
    case 32 :
        sz._32   = textsz/*+8*/; /* +8: In case adding a final sys_exit is needed */
        addr._32 = add_start;
        break;
    case 64 :
        sz._64   = textsz/*+8*/; /* +8: In case adding a final sys_exit is needed */
        addr._64 = add_start;
        break;
    default :
        WARNING_MSG( "Wrong machine width" );
        return 1;
    }

    if ( 1 == fill_mem_scn(memory, scn, sz, addr, content ) ) {
        free( ehdr );
        free( content );
        WARNING_MSG( "Unable to fill in %s segment", scn );
        return 1;
    }

    free( content );
    free( ehdr );

    return 0;
}


// fonction affichant les octets d'un segment sur la sortie standard
// parametres :
//   		seg	: le segment de la mémoire virtuelle à afficher

void print_segment_raw_content(segment* seg) {
    int k;
    int word =0;
    if (seg!=NULL && seg->size._32>0) { /* on vérifie que le segment n'est pas vide */ 
        for(k=0; k<seg->size._32; k+=4) { /* on lit chaque donnée présente dans le segment à afficher */ 
            if(k%16==0) printf("\n  0x%08x ",k); 	/* affiche l'adresse lue chaque multiple de 16 et retourne à la ligne à la fin d'un octet */
            word = *((unsigned int *) (seg->content+k));
            FLIP_ENDIANNESS(word);
            printf("%08x ",	word);  /* affiche chaque octet d'un segment */ 
        }
    }
}



/*--------------------------------------------------------------------------  */
/**
 * @param fp le fichier elf original
 * @param seg le segment à reloger
 * @param mem l'ensemble des segments
 *
 * @brief Cette fonction effectue la relocation du segment passé en parametres
 * @brief l'ensemble des segments doit déjà avoir été chargé en memoire.
 *
 * VOUS DEVEZ COMPLETER CETTE FONCTION POUR METTRE EN OEUVRE LA RELOCATION !!
 */
void reloc_segment(FILE* fp, segment seg, mem memory,unsigned int endianness,stab symtab) 
{
    byte *ehdr    = __elf_get_ehdr( fp );
    uint32_t  scnsz  = 0;
    Elf32_Rel *rel = NULL;
    char* reloc_name = malloc(strlen(seg.name)+strlen(RELOC_PREFIX_STR)+1);
    scntab section_tab;

    // on recompose le nom de la section
    memcpy(reloc_name,RELOC_PREFIX_STR,strlen(RELOC_PREFIX_STR)+1);
    strcat(reloc_name,seg.name);

    // on récupere le tableau de relocation et la table des sections
    rel = (Elf32_Rel *)elf_extract_scn_by_name( ehdr, fp, reloc_name, &scnsz, NULL );
    elf_load_scntab(fp ,32, &section_tab);



    if (rel != NULL &&seg.content!=NULL && seg.size._32!=0) {

        INFO_MSG("--------------Relocation de %s-------------------\n",seg.name) ;
        INFO_MSG("Nombre de symboles a reloger: %ld\n",scnsz/sizeof(*rel)) ;


        //------------------------------------------------------

        //TODO : faire la relocation ICI !

        //------------------------------------------------------

    }
    del_scntab(section_tab);
    free( rel );
    free( reloc_name );
    free( ehdr );

}



// la fonction charge un fichier elf en entrée en utilisant
// les arguments du prototype de la fonction main (cf. fiches infos)
//
mem load(char* name) 
{
    char* section_names[NB_SECTIONS]= {TEXT_SECTION_STR,RODATA_SECTION_STR,DATA_SECTION_STR,BSS_SECTION_STR}; 	/* 4 sections dont les noms ont été définie ci-dessus */ 
    unsigned int segment_permissions[NB_SECTIONS]= {R_X,R__,RW_,RW_};						/* décrit les différentes permissions possibles */ 
    unsigned int nsegments;		/* nombre de segment de mémoire */ 
    int i=0,j=0;
    unsigned int type_machine;
    unsigned int endianness;   //little ou big endian
    unsigned int bus_width;    // 32 bits ou 64bits
    unsigned int next_segment_start = START_MEM; // compteur pour designer le début de la prochaine section

    mem memory;  // memoire virtuelle, c'est elle qui contiendra toute les données du programme
    stab symtab= new_stab(0); // table des symboles
    FILE * pf_elf;


    if ((pf_elf = fopen(name,"r")) == NULL) { /* si le fichier ne s'ouvre pas, on affiche un message erreur */
        ERROR_MSG("cannot open file %s", name);
    }

    if (!assert_elf_file(pf_elf)) /* si le fichier ne peut être lu, on affiche un message erreur */
        ERROR_MSG("file %s is not an ELF file", name);


    // recuperation des info de l'architecture
    elf_get_arch_info(pf_elf, &type_machine, &endianness, &bus_width);
    // et des symboles
    elf_load_symtab(pf_elf, bus_width, endianness, &symtab);


    nsegments = get_nsegments(symtab,section_names,NB_SECTIONS); /* ici, nsegments passe à 4 */

    // allouer la memoire virtuelle
    memory=init_mem(nsegments+4); /* nsegments incrémenté pour prévoir la pile, [heap], [lib] et [vssyscall] */

    // Ne pas oublier d'allouer les differentes sections
    j=0;
    for (i=0; i<NB_SECTIONS; i++) {
        if (is_in_symbols(section_names[i],symtab)) {
            elf_load_section_in_memory(pf_elf,memory, section_names[i],segment_permissions[i],next_segment_start);
            next_segment_start+= ((memory->seg[j].size._32+0x1000)>>12 )<<12; // on arrondit au 1k suppérieur
//          print_segment_raw_content(&memory->seg[j]); /* affiche le contenu initial du segment */ 
            j++;
        }
    }


/* alloue le segment [heap] qui restera vide */
    memory->seg[j].name          = strdup("[heap]");     /* nom du segment */
    memory->seg[j].size._32      = 0xff7f8000;    /* le segment est initialement vide */ 
    memory->seg[j].start._32     = 0x5000;      /* adresse de départ du segment */
    memory->seg[j].attr          = SCN_ATTR(1, R__);         // permission sur le segment 
    memory->seg[j].content       = calloc(memory->seg[j].size._32, sizeof(char)); //start ?    /* on alloue la mémoire réelle utile pour ce segment */

/* alloue le segment [lib] */
    memory->seg[j+1].name          = strdup("[lib]");     /* nom du segment */
    memory->seg[j+1].size._32      = 0x2000;   /* le segment est initialement vide */ 
    memory->seg[j+1].start._32     = 0xff7fd000;      /* adresse de départ du segment */
    memory->seg[j+1].attr          = SCN_ATTR(1, R__);         /* permission sur le segment */   
    memory->seg[j+1].content       = calloc(memory->seg[j+1].size._32, sizeof(char));    /* on alloue la mémoire réelle utile pour ce segment */

/* alloue la pile */
    memory->seg[j+2].name        = strdup("[stack]");   /* nom du segment */
    memory->seg[j+2].size._32    = 0x800000;     /* le segment est initialement vide */
    memory->seg[j+2].start._32   = 0xff7ff000;  /* adresse de départ du segment */
    memory->seg[j+2].attr        = SCN_ATTR(1, RW_);         /* permission sur le segment */
    memory->seg[j+2].content     = calloc(memory->seg[j+2].size._32, sizeof(char)); /* on alloue la mémoire réelle utile pour ce segment */

/* alloue le segment pour les appels systemes */
    memory->seg[j+3].name        = strdup("[vsyscall]");/* nom du segment */
    memory->seg[j+3].size._32    = 0xfff;   /* taille du segment */ 
    memory->seg[j+3].start._32   = 0xfffff000;  /* adresse de départ du segment */
    memory->seg[j+3].attr        = SCN_ATTR(1, R_X);         /* permission sur le segment */
    memory->seg[j+3].content     = calloc(memory->seg[j+3].size._32, sizeof(char));    /* on alloue la mémoire réelle utile pour ce segment */

    printf("\n------ Fichier ELF \"%s\" : sections lues lors du chargement ------\n", name);
    print_mem(memory); /* affiche le contenu de la mémoire */ 
    stab32_print( symtab);	/* affiche les symboles contenus dans le tableau symtab */ 

    // on fait le ménage avant de partir
    //del_stab(symtab);
    fclose(pf_elf);
    puts("");
    return memory;
}
